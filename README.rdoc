= ShellTest

Test modules for shell scripts.

== Description

Provides test modules to simplify testing of shell scripts.

ShellTest is not a testing framework. ShellTest integrates with Test::Unit and
MiniTest out of the box, but it should be possible to include the test modules
into other test frameworks.

== Usage

ShellTest builds on modules that provide specific functionality. The modules
may be used independently, but by including ShellTest you get them all:

  require 'shell_test/unit'
  
  class ShellTestExample < Test::Unit::TestCase
    include ShellTest
  
    def test_a_script
      script = prepare('script.sh') do |io|
        io.puts "echo goodnight $1"
      end
  
      assert_script %{
        $ sh '#{script}' moon
        goodnight moon
      }
    end
  end

==== {ShellMethods}[link:classes/ShellTest/ShellMethods.html]

Provides the shell testing methods. These methods are designed to input a
string that looks like terminal input/output. Commands are parsed out of the
string, run, and then anything printed to stdout is compared to the expected
output. In addition the exit status is checked for success (0).

Special comments following the first line of a command can turn off
output/status checking, or specify a different exit status to expect.

  require 'shell_test/unit'
  
  class ShellMethodsExample < Test::Unit::TestCase
    include ShellTest::ShellMethods
  
    def test_a_script_using_variables
      with_env("THING" => "moon") do
        assert_script %{
          $ echo "goodnight $THING"
          goodnight moon
        }
      end
    end
    
    def test_multiple_commands
      assert_script %{
        $ echo one
        one
        $ echo two
        two
      }
    end
  
    def test_multiline_commands
      assert_script %{
        $ for n in one two; do
        >   echo $n
        > done
        one
        two
      }
    end
 
    def test_exit_statuses
      assert_script %{
        $ true  # [0]
        $ false # [1]
      }
    end
    
    def test_exit_status_and_not_ouptut
      assert_script %{
        $ date  # [0] ...
      }
    end
    
    def test_output_with_inline_regexps
      assert_script_match %{
        $ cal
        :...:
        Su Mo Tu We Th Fr Sa
        :...:
      }
    end
  end

==== {FileMethods}[link:classes/ShellTest/FileMethods.html]

Sets up a temporary, test-specific directory for working with files. This
approach is better in most cases than using Tempfile because you can flag the
directory to be saved on a failure (using ENV['KEEP_OUTPUTS']='true').

By default the directory is guessed based off of the test file and test
method. If this example were located in the 'test/file_methods_example.rb'
file, then the directory for the test case would be
'test/file_methods_example/test_preparation_of_a_test_specific_file'.

  require 'shell_test/unit'
  
  class FileMethodsExample < Test::Unit::TestCase
    include ShellTest::FileMethods

    def test_preparation_of_a_test_specific_file
      path = prepare('dir/file.txt') {|io| io << 'content' }
      assert_equal "content", File.read(path)
    end
  end

== Installation

ShellTest is available as a gem[http://rubygems.org/gems/shell_test].

  $ gem install shell_test

== Development

To get started, checkout the code from GitHub[http://github.com/thinkerbot/shell_test] and run:

  git clone git://github.com/thinkerbot/shell_test.git
  cd shell_test
  rake test

To test against multiple platforms I suggest using rvm.  In that case:

  rvm rake test

Please report any issues {here}[http://github.com/thinkerbot/shell_test/issues].

== Info

Developer:: {Simon Chiang}[http://thinkerbot.posterous.com]
License:: {MIT-Style}[link:files/MIT-LICENSE.html]
